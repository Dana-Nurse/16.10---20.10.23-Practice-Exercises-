#In the code below, we have a list of raw locations in the Harry Potter world, and we create a new list 
clean_locations to store the non-None values. Then, we print both the raw and clean lists of locations.

raw_locations = ["Hogwarts", "Diagon Alley", None, "The Burrow", "Azkaban"]

clean_locations = []

for location in raw_locations:
    if location is not None:
        clean_locations.append(location)

print("Raw Locations:", raw_locations)
print("Clean Locations:", clean_locations)



#In this code below, we define a function only_wizarding_locations that takes a list of locations as input. 
It filters and returns a new list containing only locations related to the wizarding world based on specific keywords. 
When we test the function with the provided list, it will return the locations that match the wizarding keywords.

def only_wizarding_locations(locations):
    wizarding_locations = []
    wizarding_keywords = ["Hogwarts", "Diagon Alley", "The Burrow", "Azkaban"]

    for location in locations:
        for keyword in wizarding_keywords:
            if keyword in location:
                wizarding_locations.append(location)
                break

    return wizarding_locations

# Test the function
print("\nFunction: only_wizarding_locations")
locations = ["Hogwarts School of Witchcraft and Wizardry", "Gringotts Bank", "Malfoy Manor", "The Leaky Cauldron"]
print(only_wizarding_locations(locations))



lines = [
  "Dear Professor Dumbledore,",
  "I am writing to express my eagerness to attend Hogwarts School of Witchcraft and Wizardry.",
  "I have been practicing my spells and charms diligently.",
  "I look forward to the magical adventures that await me.",
  "Yours sincerely,",
  "Harry Potter"
]

text = ""  # This is the accumulator variable where we store our Harry Potter-related text

for line in lines:  # Loop through each line
    text += line  # Append the line to the text
    text += "\n"  # Add a new line character to separate lines

print(text)



#Write a program that finds the summation of every number from 1 to num.
# The number will always be a positive integer greater than 0.

def summation(number):
    if number > 0:
        total = 0  # Initialize a variable to store the sum
        for x in range(1, number + 1):
            total += x  # Add x to the running total
        return total
    else:
        return 0  # Return 0 for negative or zero input


#Given an array of integers your solution should find the smallest integer.
def find_smallest_int(arr):
    return min(arr)


#Complete the square sum function so that it squares each number passed into it
# then sums the results together.
    def square_sum(numbers):
        return sum(x ** 2 for x in numbers)
