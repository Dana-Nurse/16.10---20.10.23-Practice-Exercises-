Given two integers a and b, which can be positive or negative, find the sum of all the integers between and including them and return it. If the two numbers are equal return a or b.

Note: a and b are not ordered!

Examples (a, b) --> output (explanation)
(1, 0) --> 1 (1 + 0 = 1)
(1, 2) --> 3 (1 + 2 = 3)
(0, 1) --> 1 (0 + 1 = 1)
(1, 1) --> 1 (1 since both are same)
(-1, 0) --> -1 (-1 + 0 = -1)
(-1, 2) --> 2 (-1 + 0 + 1 + 2 = 2)
Your function should only return a number, not the explanation about how you get that number.


















#Sum of two lowest positive integers in minimum of 4 positive intergars.
def sum_two_smallest_numbers(numbers):
    sorted_numbers = sorted(numbers)
    sum = sorted_numbers[0] + sorted_numbers[1]
    return sum


print(sum_two_smallest_numbers([1,2,76,3,2,5]))
#Case Sensitivity



#In DNA strings, symbols "A" and "T" are complements of each other,
# as "C" and "G". Function receives one side of the DNA (string)
# and you need to return the other complementary side.

#Replace method
def DNA_strand(dna):
    complementary_dna = dna.replace("A", "t").replace("T", "a").replace("C", "g").replace("G", "c")
    return complementary_dna.upper()




#Loop DNA
def DNA_strand(dna):
    correct_dna = ""
    for char in dna:
        char_lower = char.lower()  # Convert the character to lowercase for comparison
        if char_lower == "a":
            correct_dna += "t"
        elif char_lower == "t":
            correct_dna += "a"
        elif char_lower == "c":
            correct_dna += "g"
        elif char_lower == "g":
            correct_dna += "c"
        else:
            correct_dna += char  # If the character is not A, T, C, or G, keep it as it is
    return correct_dna.upper()

print(DNA_strand("atcgATCG"))


#solution so that it returns true if the first argument(string)
# passed in ends with the 2nd argument (also a string).

#Correct code:
def solution1(text, ending):
    # Check if the text ends with the specified ending
    return text.endswith(ending)

#On the other hand, the corrected code utilizes
# the endswith() method available for strings in Python.


#Original verison/ However, only checks last character.
def solution(text, ending):
   text_ending = text[-1]
   ending_ending = ending[-1]
   if text_ending == ending_ending:
       return True
   else:
       return False

print(solution("dana", "haha"))

#Simple, given a string of words,
# return the length of the shortest word(s).
def find_short(s):
    words = s.split()
    shortest = min(words, key = len)
    l = len(shortest)
    return l

print(find_short("gold silver bronze"))



#a function that takes a string as input and returns the string modified to match this
# capitalization style, ensuring the first letter of each
# word and any contractions are capitalized as per Jaden Smith's writing style.

def to_jaden_case(string):
    sentence = string.split()
    jaden = []
    for word in sentence:
        jaden.append(word.capitalize())
    return " ".join(jaden)

print(to_jaden_case("my name is dana"))

#Day 14 of November 2023: 
multiline = '''
Hey, how are you?

I'm well, thanks, you?

Excellent.
'''

print(multiline)


#Monday 13th November - day off to celebrate Diwalia
